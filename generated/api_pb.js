// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.api.Check', null, global);
goog.exportSymbol('proto.api.Facet', null, global);
goog.exportSymbol('proto.api.Facet.ValType', null, global);
goog.exportSymbol('proto.api.Jwt', null, global);
goog.exportSymbol('proto.api.Latency', null, global);
goog.exportSymbol('proto.api.ListOfString', null, global);
goog.exportSymbol('proto.api.LoginRequest', null, global);
goog.exportSymbol('proto.api.Metrics', null, global);
goog.exportSymbol('proto.api.Mutation', null, global);
goog.exportSymbol('proto.api.NQuad', null, global);
goog.exportSymbol('proto.api.Operation', null, global);
goog.exportSymbol('proto.api.Operation.DropOp', null, global);
goog.exportSymbol('proto.api.Payload', null, global);
goog.exportSymbol('proto.api.Request', null, global);
goog.exportSymbol('proto.api.Request.RespFormat', null, global);
goog.exportSymbol('proto.api.Response', null, global);
goog.exportSymbol('proto.api.TxnContext', null, global);
goog.exportSymbol('proto.api.Uids', null, global);
goog.exportSymbol('proto.api.Value', null, global);
goog.exportSymbol('proto.api.Value.ValCase', null, global);
goog.exportSymbol('proto.api.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Request.repeatedFields_, null);
};
goog.inherits(proto.api.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Request.displayName = 'proto.api.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Uids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Uids.repeatedFields_, null);
};
goog.inherits(proto.api.Uids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Uids.displayName = 'proto.api.Uids';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListOfString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ListOfString.repeatedFields_, null);
};
goog.inherits(proto.api.ListOfString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.ListOfString.displayName = 'proto.api.ListOfString';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Response.displayName = 'proto.api.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Mutation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Mutation.repeatedFields_, null);
};
goog.inherits(proto.api.Mutation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Mutation.displayName = 'proto.api.Mutation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Operation.displayName = 'proto.api.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Payload.displayName = 'proto.api.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TxnContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.TxnContext.repeatedFields_, null);
};
goog.inherits(proto.api.TxnContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TxnContext.displayName = 'proto.api.TxnContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Check = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Check, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Check.displayName = 'proto.api.Check';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Version.displayName = 'proto.api.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Latency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Latency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Latency.displayName = 'proto.api.Latency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Metrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Metrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Metrics.displayName = 'proto.api.Metrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.NQuad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.NQuad.repeatedFields_, null);
};
goog.inherits(proto.api.NQuad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.NQuad.displayName = 'proto.api.NQuad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Value.oneofGroups_);
};
goog.inherits(proto.api.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Value.displayName = 'proto.api.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Facet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Facet.repeatedFields_, null);
};
goog.inherits(proto.api.Facet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Facet.displayName = 'proto.api.Facet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.LoginRequest.displayName = 'proto.api.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Jwt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Jwt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Jwt.displayName = 'proto.api.Jwt';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Request.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    query: jspb.Message.getFieldWithDefault(msg, 4, ""),
    varsMap: (f = msg.getVarsMap()) ? f.toObject(includeInstance, undefined) : [],
    readOnly: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    bestEffort: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    mutationsList: jspb.Message.toObjectList(msg.getMutationsList(),
    proto.api.Mutation.toObject, includeInstance),
    commitNow: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    respFormat: jspb.Message.getFieldWithDefault(msg, 14, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Request}
 */
proto.api.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Request;
  return proto.api.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Request}
 */
proto.api.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 5:
      var value = msg.getVarsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadOnly(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBestEffort(value);
      break;
    case 12:
      var value = new proto.api.Mutation;
      reader.readMessage(value,proto.api.Mutation.deserializeBinaryFromReader);
      msg.addMutations(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommitNow(value);
      break;
    case 14:
      var value = /** @type {!proto.api.Request.RespFormat} */ (reader.readEnum());
      msg.setRespFormat(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTs();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVarsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getReadOnly();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBestEffort();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.api.Mutation.serializeBinaryToWriter
    );
  }
  f = message.getCommitNow();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getRespFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.api.Request.RespFormat = {
  JSON: 0,
  RDF: 1
};

/**
 * optional uint64 start_ts = 1;
 * @return {number}
 */
proto.api.Request.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string query = 4;
 * @return {string}
 */
proto.api.Request.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> vars = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Request.prototype.getVarsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.clearVarsMap = function() {
  this.getVarsMap().clear();
  return this;};


/**
 * optional bool read_only = 6;
 * @return {boolean}
 */
proto.api.Request.prototype.getReadOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setReadOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool best_effort = 7;
 * @return {boolean}
 */
proto.api.Request.prototype.getBestEffort = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setBestEffort = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated Mutation mutations = 12;
 * @return {!Array<!proto.api.Mutation>}
 */
proto.api.Request.prototype.getMutationsList = function() {
  return /** @type{!Array<!proto.api.Mutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Mutation, 12));
};


/**
 * @param {!Array<!proto.api.Mutation>} value
 * @return {!proto.api.Request} returns this
*/
proto.api.Request.prototype.setMutationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.api.Mutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Mutation}
 */
proto.api.Request.prototype.addMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.api.Mutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.clearMutationsList = function() {
  return this.setMutationsList([]);
};


/**
 * optional bool commit_now = 13;
 * @return {boolean}
 */
proto.api.Request.prototype.getCommitNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setCommitNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional RespFormat resp_format = 14;
 * @return {!proto.api.Request.RespFormat}
 */
proto.api.Request.prototype.getRespFormat = function() {
  return /** @type {!proto.api.Request.RespFormat} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.api.Request.RespFormat} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setRespFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional string hash = 15;
 * @return {string}
 */
proto.api.Request.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Request} returns this
 */
proto.api.Request.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Uids.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Uids.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Uids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Uids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Uids.toObject = function(includeInstance, msg) {
  var f, obj = {
    uidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Uids}
 */
proto.api.Uids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Uids;
  return proto.api.Uids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Uids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Uids}
 */
proto.api.Uids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Uids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Uids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Uids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Uids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string uids = 1;
 * @return {!Array<string>}
 */
proto.api.Uids.prototype.getUidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.Uids} returns this
 */
proto.api.Uids.prototype.setUidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.Uids} returns this
 */
proto.api.Uids.prototype.addUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Uids} returns this
 */
proto.api.Uids.prototype.clearUidsList = function() {
  return this.setUidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ListOfString.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListOfString.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListOfString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListOfString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListOfString.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListOfString}
 */
proto.api.ListOfString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListOfString;
  return proto.api.ListOfString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListOfString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListOfString}
 */
proto.api.ListOfString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListOfString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ListOfString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ListOfString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ListOfString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.api.ListOfString.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.ListOfString} returns this
 */
proto.api.ListOfString.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.ListOfString} returns this
 */
proto.api.ListOfString.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.ListOfString} returns this
 */
proto.api.ListOfString.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    json: msg.getJson_asB64(),
    txn: (f = msg.getTxn()) && proto.api.TxnContext.toObject(includeInstance, f),
    latency: (f = msg.getLatency()) && proto.api.Latency.toObject(includeInstance, f),
    metrics: (f = msg.getMetrics()) && proto.api.Metrics.toObject(includeInstance, f),
    uidsMap: (f = msg.getUidsMap()) ? f.toObject(includeInstance, undefined) : [],
    rdf: msg.getRdf_asB64(),
    hdrsMap: (f = msg.getHdrsMap()) ? f.toObject(includeInstance, proto.api.ListOfString.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Response}
 */
proto.api.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Response;
  return proto.api.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Response}
 */
proto.api.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJson(value);
      break;
    case 2:
      var value = new proto.api.TxnContext;
      reader.readMessage(value,proto.api.TxnContext.deserializeBinaryFromReader);
      msg.setTxn(value);
      break;
    case 3:
      var value = new proto.api.Latency;
      reader.readMessage(value,proto.api.Latency.deserializeBinaryFromReader);
      msg.setLatency(value);
      break;
    case 4:
      var value = new proto.api.Metrics;
      reader.readMessage(value,proto.api.Metrics.deserializeBinaryFromReader);
      msg.setMetrics(value);
      break;
    case 12:
      var value = msg.getUidsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRdf(value);
      break;
    case 14:
      var value = msg.getHdrsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.api.ListOfString.deserializeBinaryFromReader, "", new proto.api.ListOfString());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTxn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.TxnContext.serializeBinaryToWriter
    );
  }
  f = message.getLatency();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Latency.serializeBinaryToWriter
    );
  }
  f = message.getMetrics();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Metrics.serializeBinaryToWriter
    );
  }
  f = message.getUidsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRdf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getHdrsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.api.ListOfString.serializeBinaryToWriter);
  }
};


/**
 * optional bytes json = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Response.prototype.getJson = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes json = 1;
 * This is a type-conversion wrapper around `getJson()`
 * @return {string}
 */
proto.api.Response.prototype.getJson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJson()));
};


/**
 * optional bytes json = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJson()`
 * @return {!Uint8Array}
 */
proto.api.Response.prototype.getJson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJson()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.setJson = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional TxnContext txn = 2;
 * @return {?proto.api.TxnContext}
 */
proto.api.Response.prototype.getTxn = function() {
  return /** @type{?proto.api.TxnContext} */ (
    jspb.Message.getWrapperField(this, proto.api.TxnContext, 2));
};


/**
 * @param {?proto.api.TxnContext|undefined} value
 * @return {!proto.api.Response} returns this
*/
proto.api.Response.prototype.setTxn = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.clearTxn = function() {
  return this.setTxn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Response.prototype.hasTxn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Latency latency = 3;
 * @return {?proto.api.Latency}
 */
proto.api.Response.prototype.getLatency = function() {
  return /** @type{?proto.api.Latency} */ (
    jspb.Message.getWrapperField(this, proto.api.Latency, 3));
};


/**
 * @param {?proto.api.Latency|undefined} value
 * @return {!proto.api.Response} returns this
*/
proto.api.Response.prototype.setLatency = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.clearLatency = function() {
  return this.setLatency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Response.prototype.hasLatency = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Metrics metrics = 4;
 * @return {?proto.api.Metrics}
 */
proto.api.Response.prototype.getMetrics = function() {
  return /** @type{?proto.api.Metrics} */ (
    jspb.Message.getWrapperField(this, proto.api.Metrics, 4));
};


/**
 * @param {?proto.api.Metrics|undefined} value
 * @return {!proto.api.Response} returns this
*/
proto.api.Response.prototype.setMetrics = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.clearMetrics = function() {
  return this.setMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Response.prototype.hasMetrics = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, string> uids = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.Response.prototype.getUidsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.clearUidsMap = function() {
  this.getUidsMap().clear();
  return this;};


/**
 * optional bytes rdf = 13;
 * @return {!(string|Uint8Array)}
 */
proto.api.Response.prototype.getRdf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes rdf = 13;
 * This is a type-conversion wrapper around `getRdf()`
 * @return {string}
 */
proto.api.Response.prototype.getRdf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRdf()));
};


/**
 * optional bytes rdf = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRdf()`
 * @return {!Uint8Array}
 */
proto.api.Response.prototype.getRdf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRdf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.setRdf = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * map<string, ListOfString> hdrs = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.api.ListOfString>}
 */
proto.api.Response.prototype.getHdrsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.api.ListOfString>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      proto.api.ListOfString));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Response} returns this
 */
proto.api.Response.prototype.clearHdrsMap = function() {
  this.getHdrsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Mutation.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Mutation.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Mutation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Mutation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Mutation.toObject = function(includeInstance, msg) {
  var f, obj = {
    setJson: msg.getSetJson_asB64(),
    deleteJson: msg.getDeleteJson_asB64(),
    setNquads: msg.getSetNquads_asB64(),
    delNquads: msg.getDelNquads_asB64(),
    setList: jspb.Message.toObjectList(msg.getSetList(),
    proto.api.NQuad.toObject, includeInstance),
    delList: jspb.Message.toObjectList(msg.getDelList(),
    proto.api.NQuad.toObject, includeInstance),
    cond: jspb.Message.getFieldWithDefault(msg, 9, ""),
    commitNow: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Mutation}
 */
proto.api.Mutation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Mutation;
  return proto.api.Mutation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Mutation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Mutation}
 */
proto.api.Mutation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSetJson(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeleteJson(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSetNquads(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelNquads(value);
      break;
    case 5:
      var value = new proto.api.NQuad;
      reader.readMessage(value,proto.api.NQuad.deserializeBinaryFromReader);
      msg.addSet(value);
      break;
    case 6:
      var value = new proto.api.NQuad;
      reader.readMessage(value,proto.api.NQuad.deserializeBinaryFromReader);
      msg.addDel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCond(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommitNow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Mutation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Mutation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Mutation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Mutation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetJson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDeleteJson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSetNquads_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDelNquads_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.api.NQuad.serializeBinaryToWriter
    );
  }
  f = message.getDelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.api.NQuad.serializeBinaryToWriter
    );
  }
  f = message.getCond();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCommitNow();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional bytes set_json = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Mutation.prototype.getSetJson = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes set_json = 1;
 * This is a type-conversion wrapper around `getSetJson()`
 * @return {string}
 */
proto.api.Mutation.prototype.getSetJson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSetJson()));
};


/**
 * optional bytes set_json = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSetJson()`
 * @return {!Uint8Array}
 */
proto.api.Mutation.prototype.getSetJson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSetJson()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setSetJson = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes delete_json = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Mutation.prototype.getDeleteJson = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes delete_json = 2;
 * This is a type-conversion wrapper around `getDeleteJson()`
 * @return {string}
 */
proto.api.Mutation.prototype.getDeleteJson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeleteJson()));
};


/**
 * optional bytes delete_json = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeleteJson()`
 * @return {!Uint8Array}
 */
proto.api.Mutation.prototype.getDeleteJson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeleteJson()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setDeleteJson = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes set_nquads = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.Mutation.prototype.getSetNquads = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes set_nquads = 3;
 * This is a type-conversion wrapper around `getSetNquads()`
 * @return {string}
 */
proto.api.Mutation.prototype.getSetNquads_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSetNquads()));
};


/**
 * optional bytes set_nquads = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSetNquads()`
 * @return {!Uint8Array}
 */
proto.api.Mutation.prototype.getSetNquads_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSetNquads()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setSetNquads = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes del_nquads = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.Mutation.prototype.getDelNquads = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes del_nquads = 4;
 * This is a type-conversion wrapper around `getDelNquads()`
 * @return {string}
 */
proto.api.Mutation.prototype.getDelNquads_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelNquads()));
};


/**
 * optional bytes del_nquads = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelNquads()`
 * @return {!Uint8Array}
 */
proto.api.Mutation.prototype.getDelNquads_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelNquads()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setDelNquads = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated NQuad set = 5;
 * @return {!Array<!proto.api.NQuad>}
 */
proto.api.Mutation.prototype.getSetList = function() {
  return /** @type{!Array<!proto.api.NQuad>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.NQuad, 5));
};


/**
 * @param {!Array<!proto.api.NQuad>} value
 * @return {!proto.api.Mutation} returns this
*/
proto.api.Mutation.prototype.setSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.api.NQuad=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.NQuad}
 */
proto.api.Mutation.prototype.addSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.api.NQuad, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.clearSetList = function() {
  return this.setSetList([]);
};


/**
 * repeated NQuad del = 6;
 * @return {!Array<!proto.api.NQuad>}
 */
proto.api.Mutation.prototype.getDelList = function() {
  return /** @type{!Array<!proto.api.NQuad>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.NQuad, 6));
};


/**
 * @param {!Array<!proto.api.NQuad>} value
 * @return {!proto.api.Mutation} returns this
*/
proto.api.Mutation.prototype.setDelList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.api.NQuad=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.NQuad}
 */
proto.api.Mutation.prototype.addDel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.api.NQuad, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.clearDelList = function() {
  return this.setDelList([]);
};


/**
 * optional string cond = 9;
 * @return {string}
 */
proto.api.Mutation.prototype.getCond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setCond = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool commit_now = 14;
 * @return {boolean}
 */
proto.api.Mutation.prototype.getCommitNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Mutation} returns this
 */
proto.api.Mutation.prototype.setCommitNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dropAttr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dropAll: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    dropOp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dropValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    runInBackground: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Operation;
  return proto.api.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Operation}
 */
proto.api.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDropAttr(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDropAll(value);
      break;
    case 4:
      var value = /** @type {!proto.api.Operation.DropOp} */ (reader.readEnum());
      msg.setDropOp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDropValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunInBackground(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDropAttr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDropAll();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDropOp();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDropValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRunInBackground();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.api.Operation.DropOp = {
  NONE: 0,
  ALL: 1,
  DATA: 2,
  ATTR: 3,
  TYPE: 4
};

/**
 * optional string schema = 1;
 * @return {string}
 */
proto.api.Operation.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setSchema = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string drop_attr = 2;
 * @return {string}
 */
proto.api.Operation.prototype.getDropAttr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setDropAttr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool drop_all = 3;
 * @return {boolean}
 */
proto.api.Operation.prototype.getDropAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setDropAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional DropOp drop_op = 4;
 * @return {!proto.api.Operation.DropOp}
 */
proto.api.Operation.prototype.getDropOp = function() {
  return /** @type {!proto.api.Operation.DropOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.api.Operation.DropOp} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setDropOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string drop_value = 5;
 * @return {string}
 */
proto.api.Operation.prototype.getDropValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setDropValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool run_in_background = 6;
 * @return {boolean}
 */
proto.api.Operation.prototype.getRunInBackground = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Operation} returns this
 */
proto.api.Operation.prototype.setRunInBackground = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Payload}
 */
proto.api.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Payload;
  return proto.api.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Payload}
 */
proto.api.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Payload.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.api.Payload.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.api.Payload.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Payload} returns this
 */
proto.api.Payload.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TxnContext.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TxnContext.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TxnContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TxnContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxnContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commitTs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aborted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    keysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    predsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    hash: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TxnContext}
 */
proto.api.TxnContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TxnContext;
  return proto.api.TxnContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TxnContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TxnContext}
 */
proto.api.TxnContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCommitTs(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAborted(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPreds(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TxnContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TxnContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TxnContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TxnContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTs();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCommitTs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAborted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPredsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 start_ts = 1;
 * @return {number}
 */
proto.api.TxnContext.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 commit_ts = 2;
 * @return {number}
 */
proto.api.TxnContext.prototype.getCommitTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setCommitTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool aborted = 3;
 * @return {boolean}
 */
proto.api.TxnContext.prototype.getAborted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setAborted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string keys = 4;
 * @return {!Array<string>}
 */
proto.api.TxnContext.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated string preds = 5;
 * @return {!Array<string>}
 */
proto.api.TxnContext.prototype.getPredsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setPredsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.addPreds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.clearPredsList = function() {
  return this.setPredsList([]);
};


/**
 * optional string hash = 6;
 * @return {string}
 */
proto.api.TxnContext.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TxnContext} returns this
 */
proto.api.TxnContext.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Check.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Check.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Check} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Check.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Check}
 */
proto.api.Check.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Check;
  return proto.api.Check.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Check} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Check}
 */
proto.api.Check.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Check.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Check.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Check} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Check.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Version}
 */
proto.api.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Version;
  return proto.api.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Version}
 */
proto.api.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.api.Version.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Version} returns this
 */
proto.api.Version.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Latency.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Latency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Latency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Latency.toObject = function(includeInstance, msg) {
  var f, obj = {
    parsingNs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    processingNs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    encodingNs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    assignTimestampNs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalNs: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Latency}
 */
proto.api.Latency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Latency;
  return proto.api.Latency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Latency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Latency}
 */
proto.api.Latency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParsingNs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProcessingNs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEncodingNs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignTimestampNs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalNs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Latency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Latency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Latency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Latency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParsingNs();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProcessingNs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEncodingNs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAssignTimestampNs();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotalNs();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 parsing_ns = 1;
 * @return {number}
 */
proto.api.Latency.prototype.getParsingNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Latency} returns this
 */
proto.api.Latency.prototype.setParsingNs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 processing_ns = 2;
 * @return {number}
 */
proto.api.Latency.prototype.getProcessingNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Latency} returns this
 */
proto.api.Latency.prototype.setProcessingNs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 encoding_ns = 3;
 * @return {number}
 */
proto.api.Latency.prototype.getEncodingNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Latency} returns this
 */
proto.api.Latency.prototype.setEncodingNs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 assign_timestamp_ns = 4;
 * @return {number}
 */
proto.api.Latency.prototype.getAssignTimestampNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Latency} returns this
 */
proto.api.Latency.prototype.setAssignTimestampNs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 total_ns = 5;
 * @return {number}
 */
proto.api.Latency.prototype.getTotalNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Latency} returns this
 */
proto.api.Latency.prototype.setTotalNs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Metrics.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Metrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Metrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Metrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    numUidsMap: (f = msg.getNumUidsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Metrics}
 */
proto.api.Metrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Metrics;
  return proto.api.Metrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Metrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Metrics}
 */
proto.api.Metrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getNumUidsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Metrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Metrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Metrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Metrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumUidsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * map<string, uint64> num_uids = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.api.Metrics.prototype.getNumUidsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.Metrics} returns this
 */
proto.api.Metrics.prototype.clearNumUidsMap = function() {
  this.getNumUidsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.NQuad.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.NQuad.prototype.toObject = function(opt_includeInstance) {
  return proto.api.NQuad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.NQuad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.NQuad.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    predicate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    objectId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    objectValue: (f = msg.getObjectValue()) && proto.api.Value.toObject(includeInstance, f),
    lang: jspb.Message.getFieldWithDefault(msg, 6, ""),
    facetsList: jspb.Message.toObjectList(msg.getFacetsList(),
    proto.api.Facet.toObject, includeInstance),
    namespace: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.NQuad}
 */
proto.api.NQuad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.NQuad;
  return proto.api.NQuad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.NQuad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.NQuad}
 */
proto.api.NQuad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPredicate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 4:
      var value = new proto.api.Value;
      reader.readMessage(value,proto.api.Value.deserializeBinaryFromReader);
      msg.setObjectValue(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 7:
      var value = new proto.api.Facet;
      reader.readMessage(value,proto.api.Facet.deserializeBinaryFromReader);
      msg.addFacets(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.NQuad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.NQuad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.NQuad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.NQuad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPredicate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getObjectValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Value.serializeBinaryToWriter
    );
  }
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFacetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.api.Facet.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.api.NQuad.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string predicate = 2;
 * @return {string}
 */
proto.api.NQuad.prototype.getPredicate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.setPredicate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string object_id = 3;
 * @return {string}
 */
proto.api.NQuad.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Value object_value = 4;
 * @return {?proto.api.Value}
 */
proto.api.NQuad.prototype.getObjectValue = function() {
  return /** @type{?proto.api.Value} */ (
    jspb.Message.getWrapperField(this, proto.api.Value, 4));
};


/**
 * @param {?proto.api.Value|undefined} value
 * @return {!proto.api.NQuad} returns this
*/
proto.api.NQuad.prototype.setObjectValue = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.clearObjectValue = function() {
  return this.setObjectValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.NQuad.prototype.hasObjectValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string lang = 6;
 * @return {string}
 */
proto.api.NQuad.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.setLang = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Facet facets = 7;
 * @return {!Array<!proto.api.Facet>}
 */
proto.api.NQuad.prototype.getFacetsList = function() {
  return /** @type{!Array<!proto.api.Facet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Facet, 7));
};


/**
 * @param {!Array<!proto.api.Facet>} value
 * @return {!proto.api.NQuad} returns this
*/
proto.api.NQuad.prototype.setFacetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.api.Facet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Facet}
 */
proto.api.NQuad.prototype.addFacets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.api.Facet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.clearFacetsList = function() {
  return this.setFacetsList([]);
};


/**
 * optional uint64 namespace = 8;
 * @return {number}
 */
proto.api.NQuad.prototype.getNamespace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.NQuad} returns this
 */
proto.api.NQuad.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.api.Value.ValCase = {
  VAL_NOT_SET: 0,
  DEFAULT_VAL: 1,
  BYTES_VAL: 2,
  INT_VAL: 3,
  BOOL_VAL: 4,
  STR_VAL: 5,
  DOUBLE_VAL: 6,
  GEO_VAL: 7,
  DATE_VAL: 8,
  DATETIME_VAL: 9,
  PASSWORD_VAL: 10,
  UID_VAL: 11
};

/**
 * @return {proto.api.Value.ValCase}
 */
proto.api.Value.prototype.getValCase = function() {
  return /** @type {proto.api.Value.ValCase} */(jspb.Message.computeOneofCase(this, proto.api.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultVal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bytesVal: msg.getBytesVal_asB64(),
    intVal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    boolVal: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    strVal: jspb.Message.getFieldWithDefault(msg, 5, ""),
    doubleVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    geoVal: msg.getGeoVal_asB64(),
    dateVal: msg.getDateVal_asB64(),
    datetimeVal: msg.getDatetimeVal_asB64(),
    passwordVal: jspb.Message.getFieldWithDefault(msg, 10, ""),
    uidVal: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Value}
 */
proto.api.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Value;
  return proto.api.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Value}
 */
proto.api.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultVal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesVal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntVal(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrVal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleVal(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeoVal(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDateVal(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDatetimeVal(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswordVal(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUidVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string default_val = 1;
 * @return {string}
 */
proto.api.Value.prototype.getDefaultVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setDefaultVal = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearDefaultVal = function() {
  return jspb.Message.setOneofField(this, 1, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasDefaultVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes bytes_val = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Value.prototype.getBytesVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytes_val = 2;
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {string}
 */
proto.api.Value.prototype.getBytesVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesVal()));
};


/**
 * optional bytes bytes_val = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {!Uint8Array}
 */
proto.api.Value.prototype.getBytesVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setBytesVal = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearBytesVal = function() {
  return jspb.Message.setOneofField(this, 2, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasBytesVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_val = 3;
 * @return {number}
 */
proto.api.Value.prototype.getIntVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setIntVal = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearIntVal = function() {
  return jspb.Message.setOneofField(this, 3, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasIntVal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_val = 4;
 * @return {boolean}
 */
proto.api.Value.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setBoolVal = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearBoolVal = function() {
  return jspb.Message.setOneofField(this, 4, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string str_val = 5;
 * @return {string}
 */
proto.api.Value.prototype.getStrVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setStrVal = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearStrVal = function() {
  return jspb.Message.setOneofField(this, 5, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasStrVal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double double_val = 6;
 * @return {number}
 */
proto.api.Value.prototype.getDoubleVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setDoubleVal = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearDoubleVal = function() {
  return jspb.Message.setOneofField(this, 6, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasDoubleVal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes geo_val = 7;
 * @return {!(string|Uint8Array)}
 */
proto.api.Value.prototype.getGeoVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes geo_val = 7;
 * This is a type-conversion wrapper around `getGeoVal()`
 * @return {string}
 */
proto.api.Value.prototype.getGeoVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeoVal()));
};


/**
 * optional bytes geo_val = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeoVal()`
 * @return {!Uint8Array}
 */
proto.api.Value.prototype.getGeoVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeoVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setGeoVal = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearGeoVal = function() {
  return jspb.Message.setOneofField(this, 7, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasGeoVal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes date_val = 8;
 * @return {!(string|Uint8Array)}
 */
proto.api.Value.prototype.getDateVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes date_val = 8;
 * This is a type-conversion wrapper around `getDateVal()`
 * @return {string}
 */
proto.api.Value.prototype.getDateVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDateVal()));
};


/**
 * optional bytes date_val = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDateVal()`
 * @return {!Uint8Array}
 */
proto.api.Value.prototype.getDateVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDateVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setDateVal = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearDateVal = function() {
  return jspb.Message.setOneofField(this, 8, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasDateVal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes datetime_val = 9;
 * @return {!(string|Uint8Array)}
 */
proto.api.Value.prototype.getDatetimeVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes datetime_val = 9;
 * This is a type-conversion wrapper around `getDatetimeVal()`
 * @return {string}
 */
proto.api.Value.prototype.getDatetimeVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDatetimeVal()));
};


/**
 * optional bytes datetime_val = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDatetimeVal()`
 * @return {!Uint8Array}
 */
proto.api.Value.prototype.getDatetimeVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDatetimeVal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setDatetimeVal = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearDatetimeVal = function() {
  return jspb.Message.setOneofField(this, 9, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasDatetimeVal = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string password_val = 10;
 * @return {string}
 */
proto.api.Value.prototype.getPasswordVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setPasswordVal = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearPasswordVal = function() {
  return jspb.Message.setOneofField(this, 10, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasPasswordVal = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 uid_val = 11;
 * @return {number}
 */
proto.api.Value.prototype.getUidVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.setUidVal = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.api.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.Value} returns this
 */
proto.api.Value.prototype.clearUidVal = function() {
  return jspb.Message.setOneofField(this, 11, proto.api.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Value.prototype.hasUidVal = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Facet.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Facet.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Facet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Facet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Facet.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: msg.getValue_asB64(),
    valType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tokensList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    alias: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Facet}
 */
proto.api.Facet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Facet;
  return proto.api.Facet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Facet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Facet}
 */
proto.api.Facet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.api.Facet.ValType} */ (reader.readEnum());
      msg.setValType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTokens(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Facet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Facet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Facet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Facet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.api.Facet.ValType = {
  STRING: 0,
  INT: 1,
  FLOAT: 2,
  BOOL: 3,
  DATETIME: 4
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.Facet.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Facet.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.api.Facet.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.api.Facet.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ValType val_type = 3;
 * @return {!proto.api.Facet.ValType}
 */
proto.api.Facet.prototype.getValType = function() {
  return /** @type {!proto.api.Facet.ValType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.Facet.ValType} value
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.setValType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string tokens = 4;
 * @return {!Array<string>}
 */
proto.api.Facet.prototype.getTokensList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.setTokensList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.addTokens = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * optional string alias = 5;
 * @return {string}
 */
proto.api.Facet.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Facet} returns this
 */
proto.api.Facet.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    refreshToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.LoginRequest}
 */
proto.api.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.LoginRequest;
  return proto.api.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.LoginRequest}
 */
proto.api.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNamespace();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string userid = 1;
 * @return {string}
 */
proto.api.LoginRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.LoginRequest} returns this
 */
proto.api.LoginRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.api.LoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.LoginRequest} returns this
 */
proto.api.LoginRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string refresh_token = 3;
 * @return {string}
 */
proto.api.LoginRequest.prototype.getRefreshToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.LoginRequest} returns this
 */
proto.api.LoginRequest.prototype.setRefreshToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 namespace = 4;
 * @return {number}
 */
proto.api.LoginRequest.prototype.getNamespace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.LoginRequest} returns this
 */
proto.api.LoginRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Jwt.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Jwt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Jwt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Jwt.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessJwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refreshJwt: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Jwt}
 */
proto.api.Jwt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Jwt;
  return proto.api.Jwt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Jwt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Jwt}
 */
proto.api.Jwt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessJwt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Jwt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Jwt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Jwt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Jwt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefreshJwt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string access_jwt = 1;
 * @return {string}
 */
proto.api.Jwt.prototype.getAccessJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Jwt} returns this
 */
proto.api.Jwt.prototype.setAccessJwt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string refresh_jwt = 2;
 * @return {string}
 */
proto.api.Jwt.prototype.getRefreshJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Jwt} returns this
 */
proto.api.Jwt.prototype.setRefreshJwt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.api);
